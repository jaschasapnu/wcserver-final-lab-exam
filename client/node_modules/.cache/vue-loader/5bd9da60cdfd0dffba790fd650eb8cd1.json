{"remainingRequest":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&class=page&","dependencies":[{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\src\\views\\Home.vue","mtime":1585140162394},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}