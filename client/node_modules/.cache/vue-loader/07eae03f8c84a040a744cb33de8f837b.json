{"remainingRequest":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\src\\views\\News.vue?vue&type=template&id=1aa8c6e6&","dependencies":[{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\src\\views\\News.vue","mtime":1585136323480},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sapnu pc\\Downloads\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}